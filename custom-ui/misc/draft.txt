How should we name the development principle used by ReflectionUI-CustomUI?
To do this, we could draw inspiration from similar, already well-identified 
principles.

ORMs are similar in that they allow the automatic production of the persistence 
logic ("adapters" according to the DDD), then its customization, with the 
constraint of interfacing with a database schema that often already exists.
It is this constraint of interfacing with a database schema that leads to use 
the term "mapping," because there is indeed a source model (the classes) and a 
target model (the database), which are inherently different. With 
ReflectionUI-CustomUI, there is no real target model, apart from possible, very 
flexible screen mockups that simply guide the development. We therefore cannot 
speak of "mapping", only technical adaptation and customization. It should also 
be noted that unlike the UI, the persistence facilitated by the ORM is more of 
a means than an end, which allows (theoretically) customization to be carelessly 
limited or even eliminated in simple cases. However, with ReflectionUI-CustomUI, 
customization is essential. This must be taken into account in the formulation. 
We could then speak of "configuration-oriented development" or "NoCode" for the 
front-end and UI/UX in general.

But this would not highlight the fact that the developer will tend to refactor 
the class model of its domain to make it resemble the final UI. Indeed, 
ReflectionUI-CustomUI encourages this because, although the customization options 
offer many possibilities, they are not unlimited, and it is better to have a 
class model that will require as little customization as possible to achieve 
the desired graphical result. Developers will also have the ability to directly 
emulate complex graphical component behaviors in business classes, and they will 
not hesitate to do so. Typically, a video player can be emulated using an object 
with a simple "current frame" property, displayed with periodic refresh, and 
playback control methods (start, stop, fast-forward, etc.). It should also be 
noted that a form of navigation in the UI can be emulated and controlled directly 
from the model/controller, rather than in the view. In fact, one could literally 
emulate a web browser. The approach to UI development will therefore change 
significantly, and class models adapted to this reflective graphical approach 
will emerge. All these can lead to the term "reflective UI-driven development" 
(RUIDD).