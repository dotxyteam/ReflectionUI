- propose a customizations refactoring/cleaning tool that will:
	. detect type/field/method/parameters/etc references that become invalid
	. allow to fix (rename, delete, ...) them globally 
- prevent from:
	. creating a capsule field
	. generating a new member from this capsule field
	. adding this new member in the capsule
	. => StackOverfowError
- xy.reflect.ui.util.MiscUtils.sameExceptionOrBothNull(Throwable, Throwable)
may be wrong if some information is not in the exception message (rare) 
- allow to find in a safe way focused objects from the IInfo methods:
	. either add ReflectionUI#findCurrentFormObject(Class) allowing to get the
	the current object of a specific type according to the current thread
	and the focused components.
	. or add ITypeInfo#onFocusChange(Object object, List focusHierarchy) ???
- add tooltip text option for ToggleButton and CustomCheckBox ???
- it should n to be possible to return true from ITypeInfo.onFormVisibilityChange(Object, boolean)
and trigger a form refresh when the form is hidden 
- remove the fonts customization options ???
- IInfo equals() and hashCode() methods should take the ReflectionUI field into account
- IListStructuralInfo methods do not need the ItemPosition parameter as
the structural info is already bound to a  list type that is bound to an
ItemPosition. It may be enough to pass an item instead of an item position.
There is the same problem for IListeTypeInfo.isItemValidityDetected().
But note that ItemPositions allow to know the index of the item in its list.
It may be a useful information. Analyze ! 
- Form.validateForm() IAdvanceFieldControl.validateSubForms() may be replaced
by an algorithm that is based on IInfo only, not forms and field controls, since
it is possible know exactly what is displayed on the screen by inspecting
the IInfos. It would allow to not generate forms for performing list items
validation. 
- type inheritance issues:
	. not optimized (info customizations are copied during customization)
- must study the utility of SpecificitiesIdentifier
- need to test utility class (only static fields and methods) instance dialog  
- are transactions still useful ? 
since last refresh state restoration jobs exist now.
- some structural refreshing may not update IInfo related features. Check.
- allow to execute a list item method shortcut on multiple items
- IFieldInfo.alternativeListItemContructors should be taken into account
in ItemPosition.getSubListField() method used by all tree controls, not 
in only some IListStructuralInfo.getSubListField(ItemPosition) method implementations
- size in percentage of default screen size should be 
size in percentage of container size ???
- xy.reflect.ui.util.ReflectionUIUtils.formatMethodControlTooltipText(String, String, List<IParameterInfo>)
may not be optimal
- every plugin configuration is serialized as a swing renderer class instance,
yet it should be usable by JavaFX renderer for instance. Not also that every
plugin identifier refers to a swing renderer class and is store as a customization info.
- getMinimumSize() is overridden in some components and it prevents split panes from
working well. Check.
- check the use of xy.reflect.ui.info.type.factory.InfoProxyFactory.isFactoryTracedFor(ITypeInfo)
- when a dialog is closed too quickly after a field update then
the new field value is not taken into account. Maybe the problem
can be solved by using the SwingRenderer.delayedUpdateExecutor 
- handle bigdecimal, biginteger, ...
- add customization option for list method shortcut icon
- undo/redo title often empty. See Calculator example.
- vertical slider ???
- allow to specify via customizations a list backed by
a db table (should be supported by implicit list customization).
Typically the Spring CrudRepository interface should be handled.
- alternative decorations: "maximize" square not well drawn
- form validation is not thread safe
- allow multiple selection for list dynamic properties and actions
- must allow to cast a generic collection, maybe a generic type 
more generally.
- field appearance changes are detected in design mode but
not sure that field behavioral changes are detected. Check. 
- allow to specify a static options values field
- allow to specify via customizations how to undo a method call
- when refreshing forms structure the currently displayed category is lost
if a field is moved etc. Maybe there is a more elegant solution.
Think about it.
- parameter customizations are based on the parameter name and this
name may change according to the JVM version and maybe even according
to some JVM options. Think about it.
- tests to add:
	. list shortcuts
	. menu creation
	. validation status display
- JFrames (maybe JDialog too) do not get garbaged. They are intended
to be reused. SwingRenderer always create new windows( never reuse).
It must be possible to use a pool of windows.
- AbstractEditorFormBuilder.refreshEditorFormOnModification(Form) may
be obsolete since all fields (sub-forms, ..) are refreshed on any
modification. Check and correct.
- add a customization option for type icon based of field value.
- IMethodInfo.validateParameters() never overriden on proxies. Check.
- check that (may be automitically and constantly) that
typeInfo.source == source.typeInfo
- MembersCustomizationsFactory.transformMethods() potential issue: the signature 
of the transformed method often changes during the transformation but not the
method customization and this may cause issues in proxies that must deal with
this inconsistency.
- Find a strict rule to conveniently order MembersCustomizationsFactory
transformers. 
Hints: 
	. Should new generated members inherit customizations and then change 
	"silently" while the source member is being modified ?
	. Should the order of customization options in the customization tools
	be respected ?
- ParameterizedFieldsMethodInfo undoJob is always created even if it cannot
be executed mostly because the method cannot. Find a way to enable the undo
button since it will not work.
- it may be better to not have dependencies at all typically for
swing-testing-toolkit that would be more compatible with projects 
- lastFilePath should be saved by file type or ...
- allow to select value options field.
Note that it is difficult because virtual fields and their type are discovered at
runtime after the customizations application. Then there is no way, unless we
are given a reference to the customized ITypeInfo, to know which fields are
available when building the customization tools. It may be a solution to 
cache the ITypeInfos maybe in the SwingCustomizer each time a form is created
and customizations are enabled for instance. But it implies that the
required ITypeInfo and therefore the candidate value options fields may not be 
available preventing their selection. Maybe an explicit error message could be
displayed in this case.
- Use html control to display online help ???
- date(-time) picker controls remove selection on delayed commit.
- list customization (more options/item/open item shared type) does not allow
to view item type "Object". One may want to add sub-types to the Object type.
Think about it. Note that the type can be accessed from the customization
controller.
- modifying a customization makes leave the current form category. Fix.
- InfoCustomizations.getInfosOrderAfterMove() returns list of names
for methods. SHould probably be list of method signatures. Check.
- sub-form of transient fields do not contain transient fields.
- not sure return value mode is meaningful anymore.
Eg: fields always gets refreshed on any update whether they are calculated
or not. Think about it. 
- factories get constantly recreated uselessly from CustomizedUI.
There's then a room for optimization.
- DefaultParameterInfo.getDefaultValue(Object) return a value for primitive
types. Not sure it is a good idea to provide a default value without the
user acceptance.
- AbstractEditorFormBuilder.getEncapsulatedFieldNonSpecificTypeSource():
the type source should be non-specific but it often is.
Check if it is really necessary that it be non-specific and adjust.
- BufferedItemPosition.getSubItemPosition(int) is required to clear its
result buffer because the clone() method copies it. Maybe it would be better
to have a custom clone() method (not the built-in one).
- StandardMapAsListTypeInfo.isOrdered(): may need to always return true and
be able to adjust from the customizations since everything is possible.
Maybe the return value can be set for standard implementations by 
isAssignableFrom() should be avoided since the actual implementation can
do whatever it wants.
- In maps when the key changes then the entry is often moved in the list view
but the selection is not updated 
- ReflectionUIUtils.(setFieldValue|invokeMethod)ThroughModificationStack():
when the ModificationStack.apply() fails then the error is caught and
ModificationStack.invalidate() is called and fails too (often) because
of the same commitModification issue. Find a solution to not cause the 
same error twice.
- DialogAccessControl.openDialog(Component) calls refreshUI(). Is this really needed
since when an impact is detected the whole dialog gets refreshed ?
- Form.recreateControlPlaceHoldersIfNeeded() should not create controls (only place holders)
since they may be dismissed.
- ReflectionUIUtils.setValueThroughModificationStack() and SwingRendererUtils.handleErrors()
are directly called by controls though they should only be called by FieldControlPlaceHolders. 
Check...
or reuse the icon specified for the related method and eventually allow to override it
- add an option to allow a method to reset the modification stack (forget()).
Useful for methods like "loadFile()", "newProject()", etc.
This option would be handled here: ReflectionUIUtils.invokeMethodThroughModificationStack()
- there is a space before ListControl items because of setShowsRootHandles(true).
But setting false prevents from expanding a node to see its children.
Need to find another solution.
- maybe allow to execute a method upon list item selection. 
The method would take an item as parameter.
- ImageView: allow to associate mouse events to methods having pixel location parameters 
(int x, int y, ...). Additionnal parameters could be asked before performing the action.
Mutiple methods associated with the same event would trigger a contextual menu
allowing to choose between them. 
- list control actions validity should depend on the root list or can change
according to the list?
- should RUIUtils.NULL_JOB be used to disconnect a field from the modif stack???
- SliderPlugin: the value is formatted. OK or not???
- There is a problem with dialogs cancel button that reverts
everything since now modification stack size is limited.
Think about it. Infinite stack may be necessary
- Can not disconnect a field from the modification stack, 
there is probably the same issue with methods, check.
Check also IModif.NULL_MODIF.
- what are the effects of limiting modification stack size???
  . Some dialog cancel buttons will not work well
- allow to disable method parameters memory
- allow to use modif stack actions as methods:
	. the problem is that the customizations modifies the
	iinfos that have access to the user objects only. The
	modif stack is at another level, it have access to the 
	iinfos and the gui controls have access to it. 
- foreground =) text ???
- radio button icons
- scrollbar not showing when list control contains 1 long column
- hidden modification stacks should not store any modification
- allow to specify field target for method modification (will allow to undo method modifications)  
- allow to clean type customizations (remove renamed/removed field/method customizations).
It would be a temporary solution since it should be done automatically.
- the controls should not rely on the place holder or the form 
to trigger refresh. Also the form should not trigger uselessly 
the refresh on the field control that triggered the update that 
triggered the form refresh. 
- pass object as param to 
	. ITypeInfo.getMenuModel()
	. new MethodmenuItem()
- menu model contains swing classes though it is not not good and not even needed.
	. standard menus (undo, help, ...) can be created by generating related methods
	from the ITypeInfo
	. the action menu item will only need to expose its IMethodInfo so that the renderer
	will be responsible of all presentation stuff
	. file menus settings will just be file control settings 
	. other menu items that act on the rendered stuff (windows, ...)  will then inherit
	from a special super class that give them access to the the rendered stuff with the 
	agreement of the renderer 
- test commit author 3
- add to ITypeInfo:
	- IFieldControlPlugin getControlPlugin();	
	- Object getControlPluginConfiguration();
- optimize data update delay: not needed systematically
- improve delayed update process: extend the sleep duration on alreadly delaying schedule 
- add a proxy factory to check type specifities identifiers
- alternate (with checkbox above) nullable control plugin 
or change the nullable control depending on sub control showsCaptions() 
- StandardMapAsList: pass key and value types as typeInfos not java classes????
- list control does not handle null values. then it does not allow
to edit sub lists when they are null => NORMAL. But it is difficult
as a developer to understand that the sub list is sometimes editable
sometimes not. Find a solution. 
- allow to specify global gui infos (Ex: reflectionUI.getGlobalInfo
	. defaults (background/foreground color, ...)
	. buttons background image/color and foreground color
	. windows background (color and/or image)
	. window decorations (system, custom, ...)
	. ...
- allow to specify form background color
- allow to disable the window scroll pane ??? 
- geometric attributes are merged with behavioral attributes 
- refresh recreates many many controls uselessly: fix it ???
 may not be serious since it happens only when refreshStructure=true
- SlaveModifStack.exclusiveLinkWithParent: there must be a better way to design it 
- ModifStack.forget() should not forward an invalidation. It is not a reflection of
the object state. It is a choice made by the user that does not delete but hides   
all the memories about what happened to the object. Also note that loading an object
state from a file can be easily reverted by saving the object state before in a 
memory stream. 
- IControl*Input should be merged with I*ControlData
- modificationsTarget must be are just used to get
the name of the member involved in the modification.
It should be "fieldCaption" & "methodCaption" only 
- null control can disappear when form layout is horizontal
- add website checks
- in this context of chained transformations values origin should be traceable
in case of inconsistency???
- ListControl issue: can make tree table control larger but not smaller
to its original length
- allow to export/import to/from clipboard
- allow menu shortcuts/accelerators
- update website:
	* screenshots
	* examples 
	* ...
	* update github sites
- new controls:
	. dateChooser
- display null equivalence greyed ???
- remove method return value specificities ???
- parameters should get their customizations from
	parameterAsField customizations ???
- listControl: allow to edit multiple items at the same time
- allow to disable copy/cut/paste on lists
- add ITypeInfo.equals() ???
	=> not urgent at first sight
- what was decided about valiation of controls with no caption ???
- indent toString()s ???
- reflectionUI is often excluded from hashCode() and equals()
	=> justified ?
- dialog/panel creation is sometimes slow but no busy dialog shown
	<= multiple small showBusyDialogWHile() calls are done
	=> find a way to show the busy dialog anyway
. allow to execute dynamic actions or change dynamic properties on 
multiple nodes
- write hashCode() & equals() of some inner classes where the IDE
could not generate them
- Type params must be get from the IField/MethodInfo, not ITypeInfo
just like in the Java spec.
	. add IFieldInfo.getTypeParameters()
	https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/reflect/TypeUtils.html
	. maybe take a shortcut and implement it in a next future version
- ReflectionUI parameter is often useless. Check
- polymorphiControl:
	. what if there is only 1 subtype. use polymorphic control anyway?
- cleaning for end-developer:
	. add ReflectionUIError explicit messages
- remove IListTypeInfo.getObjectSpecificItemConstructors???
- allow to sort list view
- update ScreenShots
- update Example
- Fix all the tests
- MultipleFieldAsList with only 1 item???
- add class MetodSignature???
- update translatable strings


