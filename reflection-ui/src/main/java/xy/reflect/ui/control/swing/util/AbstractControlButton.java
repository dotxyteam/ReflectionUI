


package xy.reflect.ui.control.swing.util;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;

import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.plaf.basic.BasicBorders;

import xy.reflect.ui.control.swing.renderer.SwingRenderer;

/**
 * Base class for buttons generated by the {@link SwingRenderer}.
 * 
 * @author olitank
 *
 */
public abstract class AbstractControlButton extends JButton {

	protected static final long serialVersionUID = 1L;

	public abstract String retrieveText();

	public abstract Image retrieveBackgroundImage();

	public abstract Color retrieveBackgroundColor();

	public abstract Color retrieveForegroundColor();

	public abstract Color retrieveBorderColor();

	protected boolean buttonInitialized = false;
	protected Color buttonBackgroundColor;
	protected Color buttonActivatedBackgroundColor;
	protected Color buttonForegroundColor;
	protected Color buttonBorderColor;
	protected Image buttonBackgroundImage;
	protected String buttonText;
	protected String buttonToolTipText;
	protected Icon buttonIcon;

	public String retrieveToolTipText() {
		return null;
	}

	public Icon retrieveIcon() {
		return null;
	}

	public void updateStyle() {
		buttonBackgroundColor = retrieveBackgroundColor();
		buttonForegroundColor = retrieveForegroundColor();
		buttonBorderColor = retrieveBorderColor();
		buttonBackgroundImage = retrieveBackgroundImage();
		buttonActivatedBackgroundColor = (buttonBackgroundColor == null) ? null
				: SwingRendererUtils.addColorActivationEffect(buttonBackgroundColor);
		buttonText = retrieveText();
		buttonToolTipText = retrieveToolTipText();
		buttonIcon = retrieveIcon();

		setText(buttonText);
		if ((buttonToolTipText != null) && (buttonToolTipText.length() > 0)) {
			SwingRendererUtils.setMultilineToolTipText(this, buttonToolTipText);
		} else {
			setToolTipText(null);
		}
		setIcon(buttonIcon);
		if (buttonBackgroundColor != null) {
			setBackground(buttonBackgroundColor);
		} else {
			setBackground(new JButton().getBackground());
		}
		if (buttonForegroundColor != null) {
			setForeground(buttonForegroundColor);
		} else {
			setForeground(new JButton().getForeground());
		}
		if (buttonBorderColor != null) {
			setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(buttonBorderColor),
					new BasicBorders.MarginBorder()));
		} else {
			setBorder(new JButton().getBorder());
		}
		if ((buttonBackgroundImage != null) || (buttonBackgroundColor != null)) {
			setContentAreaFilled(false);
		} else {
			setContentAreaFilled(true);
		}
		if (buttonBackgroundImage != null) {
			setBorderPainted(false);
		} else {
			setBorderPainted(true);
		}
	}

	@Override
	public void addNotify() {
		if (!buttonInitialized) {
			updateStyle();
			buttonInitialized = true;
		}
		super.addNotify();
	}

	@Override
	protected void paintComponent(Graphics g) {
		if (buttonBackgroundImage != null) {
			Runnable paintAction = new Runnable() {
				@Override
				public void run() {
					if (getModel().isArmed()) {
						g.drawImage(SwingRendererUtils.addImageActivationEffect(buttonBackgroundImage), 0, 0,
								getWidth(), getHeight(), null);
					} else {
						g.drawImage(buttonBackgroundImage, 0, 0, getWidth(), getHeight(), null);
					}
				}
			};
			if (g instanceof Graphics2D) {
				SwingRendererUtils.withHighQualityScaling((Graphics2D) g, paintAction);
			} else {
				paintAction.run();
			}
		} else if (buttonBackgroundColor != null) {
			if (getModel().isArmed()) {
				g.setColor(buttonActivatedBackgroundColor);
				g.fillRect(0, 0, getWidth(), getHeight());
			} else if (getModel().isEnabled()) {
				g.setColor(buttonBackgroundColor);
				g.fillRect(0, 0, getWidth(), getHeight());
			}
		}
		super.paintComponent(g);
	}

}
