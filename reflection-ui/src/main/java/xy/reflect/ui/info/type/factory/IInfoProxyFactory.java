
package xy.reflect.ui.info.type.factory;

import xy.reflect.ui.info.app.IApplicationInfo;
import xy.reflect.ui.info.type.ITypeInfo;

/**
 * The base interface of all abstract UI model transformers.
 * 
 * @author olitank
 *
 */
public interface IInfoProxyFactory {

	/**
	 * Dummy instance of this class made for utilitarian purposes.
	 */
	public static final IInfoProxyFactory NULL_INFO_PROXY_FACTORY = new IInfoProxyFactory() {

		@Override
		public ITypeInfo wrapTypeInfo(ITypeInfo type) {
			return type;
		}

		@Override
		public IApplicationInfo wrapApplicationInfo(IApplicationInfo appInfo) {
			return appInfo;
		}

		@Override
		public ITypeInfo unwrapTypeInfo(ITypeInfo type) {
			return type;
		}

		@Override
		public IApplicationInfo unwrapApplicationInfo(IApplicationInfo appInfo) {
			return appInfo;
		}
	};

	/**
	 * @param appInfo The application information to be transformed.
	 * @return typically a proxy of the given application information.
	 */
	IApplicationInfo wrapApplicationInfo(IApplicationInfo appInfo);

	/**
	 * @param appInfo The application information proxy.
	 * @return the application information behind by the given proxy. Note that this
	 *         proxy should have been generated by the current factory.
	 */
	IApplicationInfo unwrapApplicationInfo(IApplicationInfo appInfo);

	/**
	 * @param type The type information to be transformed.
	 * @return typically a proxy of the given type information.
	 */
	ITypeInfo wrapTypeInfo(ITypeInfo type);

	/**
	 * @param type The type information proxy.
	 * @return the type information behind by the given proxy. Note that this proxy
	 *         should have been generated by the current factory.
	 */
	ITypeInfo unwrapTypeInfo(ITypeInfo type);

}
