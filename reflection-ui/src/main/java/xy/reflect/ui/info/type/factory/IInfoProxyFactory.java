
package xy.reflect.ui.info.type.factory;

import xy.reflect.ui.info.app.IApplicationInfo;
import xy.reflect.ui.info.field.IFieldInfo;
import xy.reflect.ui.info.method.IMethodInfo;
import xy.reflect.ui.info.parameter.IParameterInfo;
import xy.reflect.ui.info.type.ITypeInfo;
import xy.reflect.ui.info.type.enumeration.IEnumerationItemInfo;
import xy.reflect.ui.info.type.enumeration.IEnumerationTypeInfo;

/**
 * The base interface of all abstract UI model transformers.
 * 
 * @author olitank
 *
 */
public interface IInfoProxyFactory {

	/**
	 * Dummy instance of this class made for utilitarian purposes.
	 */
	public static final IInfoProxyFactory NULL_INFO_PROXY_FACTORY = new IInfoProxyFactory() {

		@Override
		public ITypeInfo wrapTypeInfo(ITypeInfo type) {
			return type;
		}

		@Override
		public IApplicationInfo wrapApplicationInfo(IApplicationInfo appInfo) {
			return appInfo;
		}

		@Override
		public ITypeInfo unwrapTypeInfo(ITypeInfo type) {
			return type;
		}

		@Override
		public IApplicationInfo unwrapApplicationInfo(IApplicationInfo appInfo) {
			return appInfo;
		}

		@Override
		public IFieldInfo wrapFieldInfo(IFieldInfo field, ITypeInfo objectType) {
			return field;
		}

		@Override
		public IFieldInfo unwrapFieldInfo(IFieldInfo field, ITypeInfo objectType) {
			return field;
		}

		@Override
		public IMethodInfo wrapMethodInfo(IMethodInfo method, ITypeInfo objectType) {
			return method;
		}

		@Override
		public IMethodInfo unwrapMethodInfo(IMethodInfo method, ITypeInfo objectType) {
			return method;
		}

		@Override
		public IEnumerationItemInfo wrapEnumerationItemInfo(IEnumerationItemInfo itemInfo,
				IEnumerationTypeInfo parentEnumType) {
			return itemInfo;
		}

		@Override
		public IEnumerationItemInfo unwrapEnumerationItemInfo(IEnumerationItemInfo itemInfo,
				IEnumerationTypeInfo parentEnumType) {
			return itemInfo;
		}

		@Override
		public IMethodInfo wrapConstructorInfo(IMethodInfo constructor, ITypeInfo objectType) {
			return constructor;
		}

		@Override
		public IMethodInfo unwrapConstructorInfo(IMethodInfo constructor, ITypeInfo objectType) {
			return constructor;
		}

		@Override
		public IParameterInfo wrapParameterInfo(IParameterInfo param, IMethodInfo method, ITypeInfo objectType) {
			return param;
		}

		@Override
		public IParameterInfo unwrapParameterInfo(IParameterInfo param, IMethodInfo method, ITypeInfo objectType) {
			return param;
		}
	};

	/**
	 * @param appInfo The application information to be transformed.
	 * @return typically a proxy of the given application information.
	 */
	IApplicationInfo wrapApplicationInfo(IApplicationInfo appInfo);

	/**
	 * @param appInfo The application information proxy.
	 * @return the application information behind by the given proxy. Note that this
	 *         proxy should have been generated by the current factory.
	 */
	IApplicationInfo unwrapApplicationInfo(IApplicationInfo appInfo);

	/**
	 * @param type The type information to be transformed.
	 * @return typically a proxy of the given type information.
	 */
	ITypeInfo wrapTypeInfo(ITypeInfo type);

	/**
	 * @param type The type information proxy.
	 * @return the type information behind by the given proxy. Note that this proxy
	 *         should have been generated by the current factory.
	 */
	ITypeInfo unwrapTypeInfo(ITypeInfo type);

	/**
	 * @param field      The field information for which a proxy must be generated.
	 * @param objectType The parent object type information.
	 * @return a proxy of the given field information.
	 */
	IFieldInfo wrapFieldInfo(IFieldInfo field, ITypeInfo objectType);

	/**
	 * @param field      The field information proxy.
	 * @param objectType The parent object type information.
	 * @return the field information behind by the given proxy. Note that this proxy
	 *         must have been generated by the current factory.
	 */
	IFieldInfo unwrapFieldInfo(IFieldInfo field, ITypeInfo objectType);

	/**
	 * @param method     The method information for which a proxy must be generated.
	 * @param objectType The parent object type information.
	 * @return a proxy of the given method information.
	 */
	IMethodInfo wrapMethodInfo(IMethodInfo method, ITypeInfo objectType);

	/**
	 * @param method     The method information proxy.
	 * @param objectType The parent object type information.
	 * @return the method information behind by the given proxy. Note that this
	 *         proxy must have been generated by the current factory.
	 */
	IMethodInfo unwrapMethodInfo(IMethodInfo method, ITypeInfo objectType);

	/**
	 * @param itemInfo       The enumeration item information for which a proxy must
	 *                       be generated.
	 * @param parentEnumType The parent enumeration type information.
	 * @return a proxy of the given enumeration item information.
	 */
	IEnumerationItemInfo wrapEnumerationItemInfo(IEnumerationItemInfo itemInfo, IEnumerationTypeInfo parentEnumType);

	/**
	 * @param itemInfo       The enumeration item information proxy.
	 * @param parentEnumType The parent enumeration type information.
	 * @return the enumeration item information behind by the given proxy. Note that
	 *         this proxy must have been generated by the current factory.
	 */
	IEnumerationItemInfo unwrapEnumerationItemInfo(IEnumerationItemInfo itemInfo, IEnumerationTypeInfo parentEnumType);

	/**
	 * @param constructor The constructor information for which a proxy must be
	 *                    generated.
	 * @param objectType  The parent object type information.
	 * @return a proxy of the given constructor information.
	 */
	IMethodInfo wrapConstructorInfo(IMethodInfo constructor, ITypeInfo objectType);

	/**
	 * @param constructor The constructor information proxy.
	 * @param objectType  The parent object type information.
	 * @return the constructor information behind by the given proxy. Note that this
	 *         proxy must have been generated by the current factory.
	 */
	IMethodInfo unwrapConstructorInfo(IMethodInfo constructor, ITypeInfo objectType);

	/**
	 * @param param      The parameter information for which a proxy must be
	 *                   generated.
	 * @param method     The parent method information.
	 * @param objectType The parent object type information.
	 * @return a proxy of the given parameter information.
	 */
	IParameterInfo wrapParameterInfo(IParameterInfo param, IMethodInfo method, ITypeInfo objectType);

	/**
	 * @param param      The parameter information proxy.
	 * @param method     The parent method information.
	 * @param objectType The parent object type information.
	 * @return the parameter information behind by the given proxy. Note that this
	 *         proxy must have been generated by the current factory.
	 */
	IParameterInfo unwrapParameterInfo(IParameterInfo param, IMethodInfo method, ITypeInfo objectType);

}
